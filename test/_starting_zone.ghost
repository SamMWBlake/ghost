At the very start of a ghost-powered game, there should be some amount of
introductory text before the player is given control.

This text supports Markdown formatting, which means it can use *italics* and
**bold** and such.

ghost supports breaking a game into multiple files; when reading a game, it will
simply concatenate all `*.ghost` files in a directory in sorted order. To that
end, it's necessary to put the start of the game in a file that will appear
first in a sort, such as `_starting_zone.ghost`.

A convenient, though not required, way to break apart files is by *zones*. This
game is defined in both `_starting_zone.ghost` (which contains introductory
text, global commands, and a starting zone) as well as in `secret_zone.ghost`,
which defines an additional zone.

The game begins in whatever room is defined first. ghost will automatically
generate a `> look` command, which simply displays the description for the
current room.

> get ye flask

In general, the format of a ghost file is that you write a command following a
prompt (`> verb [object]`) and then follow it with the descriptive text to be
displayed when the command is executed by the player; that is, the contents of
the file *look like gameplay*; this is a much more rich environment for writing
such a game than a GUI or script-heavy environment.

Commands that appear immediately after the start text are *global*; that is,
they can be invoked irrespective of room context (more on that later).

Note that use of `>` overloads the blockquote syntax of Markdown. Blockquotes in
turn usurp Markdown's code block syntax, which is indentation by four spaces:

    For night's swift dragons cut the clouds full fast  
    And yonder shines Aurora's harbinger  
    At whose approach, ghosts, wandering here and there  
    Troop home to churchyards: damned spirits all  
    That in crossways and floods have burial  
    Already to their wormy beds are gone

If you're looking to insert code blocks into your text adventure...write your
own damn engine.

> eluctate *
> elucidate *
> explicate *

Commands often have *objects* (at least in the linguistic sense) associated with
them. For commands on specific objects, this is simply implemented as with
`> get ye flask` above. For commands that can take *arbitrary* objects, the
asterisk (`*`) can be used as a wildcard that will accept any text.

It may also be desirable to have multiple commands do the same action; this is
acheieved by bundling synonymous commands together before a common block of
descriptive text.

> go starting zone -> starting room
  -> next room
  -> secret zone -> secret room

Room commands are a special case of commands:

1. They always start with `> go`.
2. They must be followed by any legal exits from the room, each indented two
   spaces and an arrow prefix.
3. They define a new *room context*. A room context determines what commands
   are available to a player at a given time.

Note that the engine does nothing to expose these exits to the player. If you
want the player to know that they can escape into the **secret zone** as well as
simply wandering into the **next room**, you'll need to indicate that in the
prose somehow.

> do something

Any command that doesn't start with `go` is a standard command. Note that
because this command is defined after a room command, it's presumed to be a
*local* command; that is, it can be executed only in this room context (i.e.
when the player is in this room).

> go next room
  -> starting room

Because ghost is somewhat lacking in interactive functionality, it compensates
by providing a richer *explorative* experience. One way in which it does that is
via *timestamps*.

Timestamps allow for time-contextual descriptive text. What do we mean by that?

[1]

The descriptive text of a command can change over "time". (Time is only roughly
simulated by ghost as "number of commands executed so far".) We can then delimit
different descriptive text with timestamps to show when each should be shown.

In this example, the initial descriptive text ("Because ghost is somewhat
lacking...") could never actually be seen by a player, because it is only shown
before time 1, and it requires at least one time step to reach this room. This
text, on the other hand, would be seen if the player executed `> go next room`
as their first command.

ghost will automatically generate a `> wait` command, which serves to increment
elapsed play time until a new description is available. If there is no future
description, the command does nothing. (Though it's invisible to the player how
much time has or has not passed.)

[100]

This text could also be shown. If the player executed 99 commands in the
starting room and then executed `> go next room`, this is the descriptive text
that would be displayed. Alternatively, the player could come to this room and
simply execute `> look` repeatedly, though they probably wouldn't have much fun
with it. Further alternatively, the player could execute the `> wait` command.
